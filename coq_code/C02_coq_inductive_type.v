

(** \u4ee5\u4e0b\u4ee3\u7801\u4f1a\u9884\u5148\u5bfc\u5165\u5173\u4e8e\u6574\u6570\u7684\u5b9a\u4e49\u3001\u8bc1\u660e\u4ee5\u53ca\u81ea\u52a8\u8bc1\u660e\u6307\u4ee4\u3002*)
Require Import Coq.ZArith.ZArith.
Require Import Coq.micromega.Psatz.
Local Open Scope Z.

(** * \u5f52\u7eb3\u7c7b\u578b\u7684\u53c8\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4e8c\u53c9\u6811 *)


Inductive tree: Type :=
| Leaf: tree
| Node (l: tree) (v: Z) (r: tree): tree.

(** \u8fd9\u4e2a\u5b9a\u4e49\u8bf4\u7684\u662f\uff0c\u4e00\u68f5\u4e8c\u53c9\u6811\u8981\u4e48\u662f\u4e00\u68f5\u7a7a\u6811_[Leaf]_\uff0c\u8981\u4e48\u6709\u4e00\u68f5\u5de6\u5b50\u6811\u3001\u6709\u4e00\u68f5\u53f3
    \u5b50\u6811\u5916\u52a0\u6709\u4e00\u4e2a\u6839\u8282\u70b9\u6574\u6570\u6807\u53f7\u3002Coq\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u51fd\u6570\u5b9a\u4e49\u5f52\u7eb3\u7c7b\u578b\u5143
    \u7d20\u7684\u6027\u8d28\u3002Coq\u4e2d\u5b9a\u4e49\u9012\u5f52\u51fd\u6570\u65f6\u4f7f\u7528\u7684\u5173\u952e\u5b57\u662f_[Fixpoint]_\u3002\u4e0b\u9762\u7684\u4e24\u4e2a\u5b9a\u4e49\u901a\u8fc7
    \u9012\u5f52\u5b9a\u4e49\u4e86\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u548c\u8282\u70b9\u4e2a\u6570\u3002*)

Fixpoint tree_height (t: tree): Z :=
  match t with
  | Leaf => 0
  | Node l v r => Z.max (tree_height l) (tree_height r) + 1
  end.
Fixpoint tree_size (t: tree): Z :=
  match t with
  | Leaf => 0
  | Node l v r => tree_size l + tree_size r + 1
  end.

(** Coq\u4e2d\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u6811\u5230\u6811\u7684\u51fd\u6570\u3002\u4e0b\u9762\u7684_[tree_reverse]_\u51fd\u6570\u628a\u4e8c\u53c9\u6811\u8fdb\u884c\u4e86\u5de6\u53f3\u7ffb\u8f6c\u3002 *)

Fixpoint tree_reverse (t: tree): tree :=
  match t with
  | Leaf => Leaf
  | Node l v r => Node (tree_reverse r) v (tree_reverse l)
  end.

(** \u4e0b\u9762\u753b\u51fa\u7684\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u5de6\u53f3\u7ffb\u8f6c\u7684\u4f8b\u5b50\u3002\u5982\u679c_[t]_\u662f\u5de6\u8fb9\u7684\u6811\uff0c\u90a3\u4e48
    _[tree_reverse t]_\u7684\u8ba1\u7b97\u7ed3\u679c\u5c31\u662f\u53f3\u8fb9\u7684\u6811\u3002*)

(**      5                5
        / \              / \
       3   9            9   3
          / \          / \
         8  100      100  8     *)

(** \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u6811\u4ee5\u53ca\u5de6\u53f3\u7ffb\u8f6c\u7684\u8ba1\u7b97\u7ed3\u679c\u90fd\u53ef\u4ee5\u5728Coq\u4e2d\u8868\u793a\u51fa\u6765\uff1a*)

(** Coq\u8868\u793a *)
Example tree_reverse_example:
  tree_reverse
    (Node
       (Node Leaf 3 Leaf)
       5
       (Node (Node Leaf 8 Leaf) 9 (Node Leaf 100 Leaf)))
  =
  Node
    (Node (Node Leaf 100 Leaf) 9 (Node Leaf 8 Leaf))
    5
    (Node Leaf 3 Leaf).
Proof. reflexivity. Qed.

(** * \u7ed3\u6784\u5f52\u7eb3\u6cd5\u8bc1\u660e *)

(** \u6211\u4eec\u63a5\u4e0b\u53bb\u5c06\u8bc1\u660e\u4e00\u4e9b\u5173\u4e8e_[tree_height]_\uff0c_[tree_size]_\u4e0e_[tree_reverse]_\u7684\u57fa
    \u672c\u6027\u8d28\u3002\u6211\u4eec\u5728\u8bc1\u660e\u4e2d\u5c06\u4f1a\u4f7f\u7528\u7684\u4e3b\u8981\u65b9\u6cd5\u662f\u5f52\u7eb3\u6cd5\u3002*)

(** \u76f8\u4fe1\u5927\u5bb6\u90fd\u5f88\u719f\u6089\u81ea\u7136\u6570\u96c6\u4e0a\u7684\u6570\u5b66\u5f52\u7eb3\u6cd5\u3002\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bf4\u7684\u662f\uff1a\u5982\u679c\u6211\u4eec\u8981\u8bc1\u660e\u67d0\u6027
    \u8d28_[P]_\u5bf9\u4e8e\u4efb\u610f\u81ea\u7136\u6570_[n]_\u90fd\u6210\u7acb\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u5c06\u8bc1\u660e\u5206\u4e3a\u5982\u4e0b\u4e24\u6b65\uff1a*)

(** \u5960\u57fa\u6b65\u9aa4\uff1a\u8bc1\u660e_[P 0]_\u6210\u7acb\uff1b*)
(** \u5f52\u7eb3\u6b65\u9aa4\uff1a\u8bc1\u660e\u5bf9\u4e8e\u4efb\u610f\u81ea\u7136\u6570_[n]_\uff0c\u5982\u679c_[P n]_\u6210\u7acb\uff0c\u90a3\u4e48_[P (n + 1)]_\u4e5f\u6210
    \u7acb\u3002*)


(** \u5bf9\u4e8c\u53c9\u6811\u7684\u5f52\u7eb3\u8bc1\u660e\u4e0e\u4e0a\u9762\u7684\u6570\u5b66\u5f52\u7eb3\u6cd5\u7a0d\u6709\u4e0d\u540c\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5982\u679c\u6211\u4eec\u8981\u8bc1\u660e\u67d0\u6027\u8d28
    _[P]_\u5bf9\u4e8e\u4e00\u5207\u4e8c\u53c9\u6811_[t]_\u90fd\u6210\u7acb\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8bc1\u660e\u4ee5\u4e0b\u4e24\u4e2a\u7ed3\u8bba\uff1a*)


(** \u5960\u57fa\u6b65\u9aa4\uff1a\u8bc1\u660e_[P Leaf]_\u6210\u7acb\uff1b*)
(** \u5f52\u7eb3\u6b65\u9aa4\uff1a\u8bc1\u660e\u5bf9\u4e8e\u4efb\u610f\u4e8c\u53c9\u6811_[l]_ _[r]_\u4ee5\u53ca\u4efb\u610f\u6574\u6570\u6807\u7b7e_[n]_\uff0c\u5982\u679c_[P l]_\u4e0e
    _[P r]_\u90fd\u6210\u7acb\uff0c\u90a3\u4e48_[P (Node l n r)]_\u4e5f\u6210\u7acb\u3002*)

(** \u8fd9\u6837\u7684\u8bc1\u660e\u65b9\u6cd5\u5c31\u6210\u4e3a\u7ed3\u6784\u5f52\u7eb3\u6cd5\u3002\u5728Coq\u4e2d\uff0c_[induction]_\u6307\u4ee4\u8868\u793a\uff1a\u4f7f\u7528\u7ed3\u6784\u5f52\u7eb3
    \u6cd5\u3002\u4e0b\u9762\u662f\u51e0\u4e2a\u8bc1\u660e\u7684\u4f8b\u5b50\u3002*)


(** \u7b2c\u4e00\u4e2a\u4f8b\u5b50\u662f\u8bc1\u660e_[tree_size]_\u4e0e_[tree_reverse]_\u4e4b\u95f4\u7684\u5173\u7cfb\u3002*)

Lemma reverse_size: forall t,
  tree_size (tree_reverse t) = tree_size t.
Proof.
  intros.
  induction t.
  (** \u4e0a\u9762\u8fd9\u4e2a\u6307\u4ee4\u8bf4\u7684\u662f\uff1a\u5bf9_[t]_\u7ed3\u6784\u5f52\u7eb3\u3002Coq\u4f1a\u81ea\u52a8\u5c06\u539f\u547d\u9898\u89c4\u7ea6\u4e3a\u4e24\u4e2a\u8bc1\u660e\u76ee\u6807\uff0c
      \u5373\u5960\u57fa\u6b65\u9aa4\u548c\u5f52\u7eb3\u6b65\u9aa4\u3002\u4e3a\u4e86\u589e\u52a0Coq\u8bc1\u660e\u7684\u53ef\u8bfb\u6027\uff0c\u6211\u4eec\u63a8\u8350\u5927\u5bb6\u4f7f\u7528bullet\u8bb0\u53f7
      \u628a\u5404\u4e2a\u5b50\u8bc1\u660e\u8fc7\u7a0b\u5206\u5272\u5f00\u6765\uff0c\u5c31\u50cf\u4e00\u4e2a\u4e00\u4e2a\u62bd\u5c49\u6216\u8005\u4e00\u4e2a\u4e00\u4e2a\u6587\u4ef6\u5939\u4e00\u6837\u3002Coq\u4e2d\u53ef
      \u4ee5\u4f7f\u7528\u7684bullet\u6807\u8bb0\u6709\uff1a_[+ - * ++ -- **]_ ...*)
  + simpl.
    (** \u7b2c\u4e00\u4e2a\u5206\u652f\u662f\u5960\u57fa\u6b65\u9aa4\u3002\u8fd9\u4e2a_[simpl]_\u6307\u4ee4\u8868\u793a\u5c06\u7ed3\u8bba\u4e2d\u7528\u5230\u7684\u9012\u5f52\u51fd\u6570\u6839\u636e\u5b9a
        \u4e49\u5316\u7b80\u3002*)
    reflexivity.
  + simpl.
    (** \u7b2c\u4e8c\u4e2a\u5206\u652f\u662f\u5f52\u7eb3\u6b65\u9aa4\u3002\u6211\u4eec\u770b\u5230\u8bc1\u660e\u76ee\u6807\u4e2d\u6709\u4e24\u4e2a\u524d\u63d0_[IHt1]_\u4ee5\u53ca_[IHt2]_\u3002
        \u5728\u82f1\u6587\u4e2d_[IH]_\u8868\u793ainduction hypothesis\u7684\u7f29\u5199\uff0c\u4e5f\u5c31\u662f\u5f52\u7eb3\u5047\u8bbe\u3002\u5728\u8fd9\u4e2a\u8bc1\u660e
        \u4e2d_[IHt1]_\u4e0e_[IHt2]_\u5206\u522b\u662f\u5de6\u5b50\u6811_[t1]_\u4e0e\u53f3\u5b50\u6811_[t2]_\u7684\u5f52\u7eb3\u5047\u8bbe\u3002 *)

    rewrite IHt1.
    rewrite IHt2.
    lia.
    (** \u8fd9\u4e2a_[lia]_\u6307\u4ee4\u7684\u5168\u79f0\u662flinear integer arithmatic\uff0c\u53ef\u4ee5\u7528\u6765\u81ea\u52a8\u8bc1\u660e\u5173\u4e8e\u6574
        \u6570\u7684\u7ebf\u6027\u4e0d\u7b49\u5f0f\u3002*)
Qed.


(** \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u5f88\u7c7b\u4f3c\uff0c\u662f\u8bc1\u660e_[tree_height]_\u4e0e_[tree_reverse]_\u4e4b\u95f4\u7684\u5173\u7cfb\u3002*)

Lemma reverse_height: forall t,
  tree_height (tree_reverse t) = tree_height t.
Proof.
  intros.
  induction t.
  + simpl.
    reflexivity.
  + simpl.
    rewrite IHt1.
    rewrite IHt2.
    lia.
    (** \u6ce8\u610f\uff1a\u8fd9\u4e2a_[lia]_\u6307\u4ee4\u4e5f\u662f\u80fd\u591f\u5904\u7406_[Z.max]_\u4e0e_[Z.min]_\u7684\u3002*)
Qed.

(** \u4e0b\u9762\u6211\u4eec\u5c06\u901a\u8fc7\u91cd\u5199\u4e0a\u9762\u8fd9\u4e00\u6bb5\u8bc1\u660e\uff0c\u4ecb\u7ecdCoq\u8bc1\u660e\u8bed\u8a00\u7684\u4e00\u4e9b\u5176\u4ed6\u529f\u80fd\u3002*)

Lemma reverse_height_attempt2: forall t,
  tree_height (tree_reverse t) = tree_height t.
Proof.
  intros.
  induction t; simpl.
  (** \u5728Coq\u8bc1\u660e\u8bed\u8a00\u4e2d\u53ef\u4ee5\u7528\u5206\u53f7\u5c06\u5c0f\u7684\u8bc1\u660e\u6307\u4ee4\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u5927\u7684\u8bc1\u660e\u6307\u4ee4\uff0c\u5176\u4e2d
      _[tac1 ; tac2]_\u8fd9\u4e2a\u8bc1\u660e\u6307\u4ee4\u8868\u793a\u5148\u6267\u884c\u6307\u4ee4_[tac1]_\uff0c\u518d\u5bf9\u4e8e_[tac1]_\u751f\u6210\u7684\u6bcf
      \u4e00\u4e2a\u8bc1\u660e\u76ee\u6807\u6267\u884c_[tac2]_\u3002\u5206\u53f7\u662f\u53f3\u7ed3\u5408\u7684\u3002*)
  + reflexivity.
  + simpl.
    lia.
    (** \u6b64\u5904\u7684_[lia]_\u6307\u4ee4\u4e0d\u4ec5\u53ef\u4ee5\u5904\u7406\u7ed3\u8bba\u4e2d\u7684\u6574\u6570\u7ebf\u6027\u8fd0\u7b97\uff0c\u5176\u81ea\u52a8\u8bc1\u660e\u8fc7\u7a0b\u4e2d\u4e5f\u4f1a
        \u4f7f\u7528\u524d\u63d0\u4e2d\u5173\u4e8e\u6574\u6570\u7ebf\u6027\u8fd0\u7b97\u7684\u5047\u8bbe\u3002*)
Qed.

(** \u8bf7\u5404\u4f4d\u540c\u5b66\u8bc1\u660e\u4e0b\u9762\u7ed3\u8bba\u3002*)

Lemma reverse_involutive: forall t,
  tree_reverse (tree_reverse t) = t.
Proof.
Admitted. (** *)


Lemma reverse_inv: forall t1 t2,
  tree_reverse t1 = t2 ->
  t1 = tree_reverse t2.
Proof.
  intros.
  rewrite <- H.
  rewrite reverse_involutive.
  reflexivity.
Qed.



(** * \u5b57\u7b26\u4e32 *)

(** \u4ee5\u4e0b\u4ee3\u7801\u4f1a\u9884\u5148\u5bfc\u5165\u5173\u4e8eascii\u7801\u4e0e\u5b57\u7b26\u4e32\u7684\u5b9a\u4e49\u3002*)
Require Import Coq.Strings.Ascii.
Require Import Coq.Strings.String.
Local Open Scope string.

(** \u5b57\u7b26\u4e32\u7684\u5b9a\u4e49 *)
(** \u4e0b\u9762Coq\u4ee3\u7801\u53ef\u4ee5\u7528\u4e8e\u67e5\u770b_[string]_\u5728Coq\u4e2d\u7684\u5b9a\u4e49\u3002*)
Print string.
(** \u67e5\u8be2\u7ed3\u679c\u5982\u4e0b\u3002*)
(**
Inductive string :=
| EmptyString : string
| String : ascii -> string -> string. *)

(** \u5f53\u7136\uff0cCoq\u4e5f\u63d0\u4f9b\u4e86\u4e13\u95e8\u8868\u8fbe\u5b57\u7b26\u4e32\u7684\u7b26\u53f7\u3002*)


Check EmptyString.
Check "c".
Check "c"%char.
Check String "a"%char (String "b"%char EmptyString).


(** \u67e5\u8be2\u7ed3\u679c *)
(**
"": string
"c": string
"c"%char: ascii
"ab": string
*)

(** \u6240\u4ee5\uff0c\u5b57\u7b26\u4e32\u8fd9\u6837\u7684\u94fe\u72b6\u7ed3\u6784\u5176\u5b9e\u662f\u6811\u72b6\u7ed3\u6784\u7684\u4e00\u79cd\u9000\u5316\u60c5\u51b5\uff0c\u4e5f\u53ef\u4ee5\u7528Coq\u7684\u5f52\u7eb3\u7c7b
    \u578b\u5b9a\u4e49\u3002\u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u62fc\u63a5\u548c\u53d6\u53cd\u3002*)

Fixpoint string_app (s1 s2: string): string :=
  match s1 with
  | EmptyString => s2
  | String c s1' => String c (string_app s1' s2)
  end.

Fixpoint string_rev (s: string): string :=
  match s with
  | EmptyString => EmptyString
  | String c s' => string_app (string_rev s') (String c EmptyString)
  end.

(** \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u8bc1\u660e\u4e00\u4e9b\u7b80\u5355\u7684\u6027\u8d28\u3002 *)


(** \u5f15\u7406_[string_app_assoc]_ *)
Lemma string_app_assoc: forall s1 s2 s3,
  string_app s1 (string_app s2 s3) =
  string_app (string_app s1 s2) s3.
Proof.
  intros.
  induction s1.
  + simpl.
    reflexivity.
  + simpl.
    rewrite IHs1.
    reflexivity.
Qed.

(** \u5f15\u7406_[string_app_empty_r]_ *)
Lemma string_app_empty_r: forall s,
  string_app s "" = s.
Proof.
  intros.
  induction s.
  + simpl.
    reflexivity.
  + simpl.
    rewrite IHs.
    reflexivity.
Qed.

(** \u4e0b\u9762\u6027\u8d28\u8bf7\u5927\u5bb6\u81ea\u884c\u8bc1\u660e *)
Lemma string_rev_app: forall s1 s2,
  string_rev (string_app s1 s2) =
  string_app (string_rev s2) (string_rev s1).
Proof.
  intros.
  induction s1.
  + simpl.
    rewrite string_app_empty_r.
    reflexivity.
  + simpl.
    rewrite string_app_assoc.


(** * \u81ea\u7136\u6570 *)

(** \u5c06\u5b57\u7b26\u4e32\u7b49\u94fe\u72b6\u7ed3\u6784\u8fdb\u4e00\u6b65\u9000\u5316\uff0c\u5c31\u4f1a\u5f97\u5230Coq\u4e2d\u81ea\u7136\u6570\u7684\u5b9a\u4e49\u3002*)

(** \u81ea\u7136\u6570\u96c6_[nat]_\u5728Coq\u4e2d\u7684\u5b9a\u4e49 *)
(** \u4e0b\u9762Coq\u4ee3\u7801\u53ef\u4ee5\u7528\u4e8e\u67e5\u770b_[nat]_\u5728Coq\u4e2d\u7684\u5b9a\u4e49\u3002*)
Print nat.
(** \u67e5\u8be2\u7ed3\u679c\u5982\u4e0b\u3002*)
(**
Inductive nat := O : nat | S: nat -> nat. *)

(** \u4e0b\u9762\u6211\u4eec\u5728Coq\u4e2d\u53bb\u5b9a\u4e49\u81ea\u7136\u6570\u7684\u52a0\u6cd5\uff0c\u5e76\u4e14\u4e5f\u8bd5\u7740\u8bc1\u660e\u4e00\u6761\u57fa\u672c\u6027\u8d28\uff1a\u52a0\u6cd5\u4ea4\u6362\u5f8b\u3002*)


(** \u7531\u4e8eCoq\u7684\u6807\u51c6\u5e93\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u4e86\u81ea\u7136\u6570\u4ee5\u53ca\u81ea\u7136\u6570\u7684\u52a0\u6cd5\u3002\u6211\u4eec\u5f00\u8f9f\u4e00\u4e2a_[NatDemo]_\u6765
    \u5f00\u53d1\u6211\u4eec\u81ea\u5df1\u7684\u5b9a\u4e49\u4e0e\u8bc1\u660e\u3002\u4ee5\u514d\u4e0eCoq\u6807\u51c6\u5e93\u7684\u5b9a\u4e49\u76f8\u6df7\u6dc6\u3002*)
Module NatDemo.

(** \u5148\u5b9a\u4e49\u81ea\u7136\u6570_[nat]_\u3002*)

Inductive nat :=
| O : nat
| S (n: nat): nat.

(** \u518d\u5b9a\u4e49\u81ea\u7136\u6570\u52a0\u6cd5\u3002*)

Fixpoint plus (n m: nat): nat :=
  match n with
  | O => m
  | S n' => S (plus n' m)
  end.

(** \u4e0b\u9762\u8bc1\u660e\u52a0\u6cd5\u4ea4\u6362\u5f8b\u3002*)

Theorem plus_comm: forall n m,
  plus n m = plus m n.
Proof.
Admitted. (** *)

End NatDemo.

(** * While + DB\u8bed\u8a00\u7684\u8bed\u6cd5\u6811 *)

(**Fail at conflict_label_not_exist1() test.
